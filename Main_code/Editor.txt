def Launch_JSON_Edit(parent,edit_btn):        
    JEDIT = tk.Toplevel(parent)
    JEDIT.title("JSON Editor GUI")
    JEDIT.geometry("+400+80")
    JEDIT.resizable(False, False)

    def close_editor():
        edit_btn.config(state="normal")
        JEDIT.destroy()

    JEDIT.protocol("WM_DELETE_WINDOW", close_editor)

    status_label = ttk.Label(JEDIT, text="")
    status_label.grid(row=0, column=1, columnspan=5, padx=10, pady=2, sticky="ew")

    # ---------- Simple Form Section ----------
    simple_frame = ttk.LabelFrame(JEDIT, text="Simple Form")
    simple_frame.grid(row=1, column=0, columnspan=5, padx=10, pady=10, sticky="ew")

    username = ttk.Entry(simple_frame, width=20)
    password = ttk.Entry(simple_frame, width=20)
    tc_userid = ttk.Entry(simple_frame, width=20)
    api_key = ttk.Entry(simple_frame, width=20)
    upi = ttk.Entry(simple_frame, width=20)
    target_time = ttk.Entry(simple_frame, width=20)

    simple_fields = [("Username", username), ("Password", password),
                    ("TC User ID", tc_userid), ("API Key", api_key),
                    ("UPI ID", upi), ("Target Time", target_time)]

    for idx, (label, entry) in enumerate(simple_fields):
        ttk.Label(simple_frame, text=label).grid(row=idx // 2, column=(idx % 2) * 2, sticky="w")
        entry.grid(row=idx // 2, column=(idx % 2) * 2 + 1, padx=5, pady=1)

    # ---------- Journey Details ----------
    journey_frame = ttk.LabelFrame(JEDIT, text="Journey Details")
    journey_frame.grid(row=2, column=0, columnspan=5, padx=10, pady=10, sticky="ew")
    train_no = ttk.Entry(journey_frame, width=15)
    frm = ttk.Entry(journey_frame, width=15)
    to = ttk.Entry(journey_frame, width=15)
    date_entry = DateEntry(journey_frame, width=13, date_pattern='yyyy-mm-dd')
    cls = ttk.Combobox(journey_frame, values=["SL", "3A", "2A"], width=12)
    quota = ttk.Combobox(journey_frame, values=["GN", "TQ", "PT"], width=12)

    journey_fields = [("Train No", train_no), ("From", frm), ("To", to),
                    ("Date (YYYY-MM-DD)", date_entry), ("Class", cls), ("Quota", quota)]

    for idx, (label, entry) in enumerate(journey_fields):
        ttk.Label(journey_frame, text=label).grid(row=0 if idx < 3 else 1, column=idx % 3 * 2, sticky="w")
        entry.grid(row=0 if idx < 3 else 1, column=idx % 3 * 2 + 1, padx=5, pady=1)

    # ---------- Passenger Details ----------
    passenger_frame = ttk.LabelFrame(JEDIT, text="Passenger Details")
    passenger_frame.grid(row=3, column=0, columnspan=5, padx=10, pady=15, sticky="ew")

    def age(new_value):
        if new_value == "":
            return True
        return new_value.isdigit() and len(new_value) <= 2
    agecmd = (JEDIT.register(age), '%P')

    passenger_entries = []

    # Add column headings
    headers = ["#", "Name", "Age", "Gender", "Berth", "Food", "Child Berth"]
    for col, text in enumerate(headers):
        header_label = ttk.Label(passenger_frame, text=text, font=("Segoe UI", 10, "bold"))
        header_label.grid(row=0, column=col, padx=2, pady=2)

    def make_passenger_row(row):
        PassengerSno = ttk.Label(passenger_frame, text="❯❯❯❯")
        name = ttk.Entry(passenger_frame, width=15)
        age = ttk.Entry(passenger_frame, validate='key', validatecommand=agecmd, width=5)
        gender = ttk.Combobox(passenger_frame, values=["M", "F", "T"], width=5)
        berth = ttk.Combobox(passenger_frame, values=["LB", "MB", "UB", "SL", "SU"], width=5)
        food = ttk.Combobox(passenger_frame, values=["No Food", "Veg", "Non Veg", "Jain Meal", "Veg (Diabetic)","Non Veg (Diabetic)"], width=10)
        child_berth = tk.BooleanVar()
        child_cb = ttk.Checkbutton(passenger_frame, variable=child_berth)

        widgets = [name, age, gender, berth, food, child_berth]
        passenger_entries.append(widgets)

        PassengerSno.grid(row=row, column=0, padx=2)
        name.grid(row=row, column=1, padx=2,pady=1)
        age.grid(row=row, column=2, padx=2)
        gender.grid(row=row, column=3, padx=2)
        berth.grid(row=row, column=4, padx=2)
        food.grid(row=row, column=5, padx=2)
        child_cb.grid(row=row, column=6, padx=2)

    for r in range(1,7):
        make_passenger_row(r)

    # ---------- Other Preferences ----------
    other_frame = ttk.LabelFrame(JEDIT, text="Other Preferences")
    other_frame.grid(row=4, column=0, columnspan=3, padx=10, pady=10, sticky="ew")

    def validate_mobile(new_value):
        if new_value == "":
            return True
        return new_value.isdigit() and len(new_value) <= 10
    vcmd = (JEDIT.register(validate_mobile), '%P')

    mobile = ttk.Entry(other_frame, validate='key', validatecommand=vcmd)
    payment_method = ttk.Combobox(other_frame, values=["UPI", ""], width=17)
    #payment_method = ttk.Entry(other_frame)
    auto_upgrade = tk.BooleanVar()
    confirm_berths = tk.BooleanVar()
    psg_manual = tk.BooleanVar()

    prefs = [("Mobile :", mobile), ("Payment :", payment_method)]
    for i, (lbl, ent) in enumerate(prefs):
        ttk.Label(other_frame, text=lbl).grid(row=i, column=0, sticky="w")
        ent.grid(row=i, column=1, padx=2, pady=3)

    ttk.Checkbutton(other_frame, text="Auto Upgrade", variable=auto_upgrade).grid(row=2, column=0)
    ttk.Checkbutton(other_frame, text="Confirm Berths", variable=confirm_berths).grid(row=2, column=1)
    ttk.Checkbutton(other_frame, text="PSG Manual", variable=psg_manual).grid(row=2, column=2)

    # ---------- Travel Preferences ----------
    travel_frame = ttk.LabelFrame(JEDIT, text="Travel Preferences")
    travel_frame.grid(row=4, column=3, columnspan=2, padx=10, pady=10, sticky="ew")

    insurance_opt = ttk.Combobox(travel_frame, values=["yes", "no"], width=4)
    pref_coach = ttk.Entry(travel_frame, width=7)

    ttk.Label(travel_frame, text="Insurance Opted").grid(row=0, column=0)
    insurance_opt.grid(row=0, column=1,pady=5,padx=10)
    ttk.Label(travel_frame, text="Preferred Coach").grid(row=1, column=0)
    pref_coach.grid(row=1, column=1,pady=5)
    free_cap = tk.BooleanVar()
    ttk.Checkbutton(travel_frame, text="Free Captcha", variable=free_cap).grid(row=3, column=0)

    def open_json():
        file_path = filedialog.askopenfilename(filetypes=[("JSON files", "*.json")])
        if file_path:
            with open(file_path, "r") as f:
                data = json.load(f)

            target_time.delete(0, tk.END)
            target_time.insert(0, data.get("targetTime", ""))

            username.delete(0, tk.END)
            username.insert(0, data.get("username", ""))

            password.delete(0, tk.END)
            password.insert(0, data.get("password", ""))

            upi.delete(0, tk.END)
            upi.insert(0, data.get("UpiID", ""))

            tc_userid.delete(0, tk.END)
            tc_userid.insert(0, data.get("TCuserid", ""))

            api_key.delete(0, tk.END)
            api_key.insert(0, data.get("apikey", ""))

            journey = data.get("journey_details", {})
            train_no.delete(0, tk.END)
            train_no.insert(0, journey.get("train_no", ""))
            frm.delete(0, tk.END)
            frm.insert(0, journey.get("from", ""))
            to.delete(0, tk.END)
            to.insert(0, journey.get("destination", ""))
            date_entry.delete(0, tk.END)
            date_entry.insert(0, journey.get("date", ""))
            cls.delete(0, tk.END)
            cls.insert(0, journey.get("class", ""))
            quota.delete(0, tk.END)
            quota.insert(0, journey.get("quota", ""))

            for i, passenger in enumerate(data.get("passenger_details", [])):
                if i < len(passenger_entries):
                    widgets = passenger_entries[i]
                    widgets[0].delete(0, tk.END)
                    widgets[0].insert(0, passenger.get("name", ""))
                    widgets[1].delete(0, tk.END)
                    widgets[1].insert(0, passenger.get("age", ""))
                    widgets[2].set(passenger.get("gender", ""))
                    widgets[3].set(passenger.get("berth", ""))
                    widgets[4].delete(0, tk.END)
                    widgets[4].insert(0, passenger.get("food", ""))
                    widgets[5].set(passenger.get("passengerchildberth", False))

            prefs = data.get("other_preferences", {})
            mobile.delete(0, tk.END)
            mobile.insert(0, prefs.get("mobileNumber", ""))
            payment_method.delete(0, tk.END)
            payment_method.insert(0, prefs.get("paymentmethod", ""))
            auto_upgrade.set(prefs.get("autoUpgradation", False))
            confirm_berths.set(prefs.get("confirmberths", False))
            psg_manual.set(prefs.get("psgManual", False))

            travel = data.get("travel_preferences", {})
            insurance_opt.set(travel.get("travelInsuranceOpted", ""))
            pref_coach.delete(0, tk.END)
            pref_coach.insert(0, travel.get("prefcoach", ""))
            free_cap.set(travel.get("free_cap", False))

    # ---------- Save / Open Buttons ----------
    def save_json():
        data = {
            "targetTime": target_time.get(),
            "username": username.get(),
            "password": password.get(),
            "UpiID": upi.get(),
            "TCuserid": tc_userid.get(),
            "apikey": api_key.get(),
            "journey_details": {
                "train_no": train_no.get(),
                "from": frm.get(),
                "destination": to.get(),
                "date": date_entry.get(),
                "class": cls.get(),
                "quota": quota.get()
            },
            "passenger_details": [],
            "other_preferences": {
                "mobileNumber": mobile.get(),
                "paymentmethod": payment_method.get(),
                "autoUpgradation": auto_upgrade.get(),
                "confirmberths": confirm_berths.get(),
                "psgManual": psg_manual.get()
            },
            "travel_preferences": {
                "travelInsuranceOpted": insurance_opt.get(),
                "prefcoach": pref_coach.get(),
                "free_cap": free_cap.get()
            }
        }

        for p in passenger_entries:
            name, age, gender, berth, food, child = p
            if name.get().strip():
                data["passenger_details"].append({
                    "name": name.get(),
                    "age": age.get(),
                    "gender": gender.get(),
                    "berth": berth.get(),
                    "food": food.get(),
                    "passengerchildberth": child.get()
                })
        
        # 3️⃣  Create 'Forms' folder if it doesn't exist
        folder = "Forms"
        os.makedirs(folder, exist_ok=True)

            # 4️⃣  Create dynamic file name using form values
        filename = f"{train_no.get().strip()}_{frm.get().strip()}_{to.get().strip()}_{cls.get().strip()}_{quota.get().strip()}.json"
        filepath = os.path.join(folder, filename)

        # 5️⃣  Save JSON
        with open(filepath, "w") as f:
            json.dump(data, f, indent=4)

        # 6️⃣  Show success message in label
        status_label.config(text=f"Form {filename} saved successfully.",foreground="green")

    btn_frame = ttk.Frame(JEDIT)
    btn_frame.grid(row=5, column=0, columnspan=5, pady=10)

    open_btn = ttk.Button(btn_frame, text="Open JSON", command=open_json)
    open_btn.grid(row=0, column=0, padx=5)

    save_btn = ttk.Button(btn_frame, text="Save JSON", command=save_json)
    save_btn.grid(row=0, column=2, padx=5)